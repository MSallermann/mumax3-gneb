package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/kuchkin/mumax3-gneb/cuda/cu"
	"github.com/kuchkin/mumax3-gneb/timer"
	"sync"
	"unsafe"
)

// CUDA handle for copyImage kernel
var copyImage_code cu.Function

// Stores the arguments for copyImage kernel invocation
type copyImage_args_t struct {
	arg_Mx    unsafe.Pointer
	arg_My    unsafe.Pointer
	arg_Mz    unsafe.Pointer
	arg_Mx2   unsafe.Pointer
	arg_My2   unsafe.Pointer
	arg_Mz2   unsafe.Pointer
	arg_noi   int
	arg_image int
	arg_Nx    int
	arg_Ny    int
	arg_Nz    int
	argptr    [11]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for copyImage kernel invocation
var copyImage_args copyImage_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	copyImage_args.argptr[0] = unsafe.Pointer(&copyImage_args.arg_Mx)
	copyImage_args.argptr[1] = unsafe.Pointer(&copyImage_args.arg_My)
	copyImage_args.argptr[2] = unsafe.Pointer(&copyImage_args.arg_Mz)
	copyImage_args.argptr[3] = unsafe.Pointer(&copyImage_args.arg_Mx2)
	copyImage_args.argptr[4] = unsafe.Pointer(&copyImage_args.arg_My2)
	copyImage_args.argptr[5] = unsafe.Pointer(&copyImage_args.arg_Mz2)
	copyImage_args.argptr[6] = unsafe.Pointer(&copyImage_args.arg_noi)
	copyImage_args.argptr[7] = unsafe.Pointer(&copyImage_args.arg_image)
	copyImage_args.argptr[8] = unsafe.Pointer(&copyImage_args.arg_Nx)
	copyImage_args.argptr[9] = unsafe.Pointer(&copyImage_args.arg_Ny)
	copyImage_args.argptr[10] = unsafe.Pointer(&copyImage_args.arg_Nz)
}

// Wrapper for copyImage CUDA kernel, asynchronous.
func k_copyImage_async(Mx unsafe.Pointer, My unsafe.Pointer, Mz unsafe.Pointer, Mx2 unsafe.Pointer, My2 unsafe.Pointer, Mz2 unsafe.Pointer, noi int, image int, Nx int, Ny int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("copyImage")
	}

	copyImage_args.Lock()
	defer copyImage_args.Unlock()

	if copyImage_code == 0 {
		copyImage_code = fatbinLoad(copyImage_map, "copyImage")
	}

	copyImage_args.arg_Mx = Mx
	copyImage_args.arg_My = My
	copyImage_args.arg_Mz = Mz
	copyImage_args.arg_Mx2 = Mx2
	copyImage_args.arg_My2 = My2
	copyImage_args.arg_Mz2 = Mz2
	copyImage_args.arg_noi = noi
	copyImage_args.arg_image = image
	copyImage_args.arg_Nx = Nx
	copyImage_args.arg_Ny = Ny
	copyImage_args.arg_Nz = Nz

	args := copyImage_args.argptr[:]
	cu.LaunchKernel(copyImage_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("copyImage")
	}
}

// maps compute capability on PTX code for copyImage kernel.
var copyImage_map = map[int]string{0: "",
	50: copyImage_ptx_50}

// copyImage PTX code for various compute capabilities.
const (
	copyImage_ptx_50 = `
.version 7.5
.target sm_50
.address_size 64

	// .globl	copyImage

.visible .entry copyImage(
	.param .u64 copyImage_param_0,
	.param .u64 copyImage_param_1,
	.param .u64 copyImage_param_2,
	.param .u64 copyImage_param_3,
	.param .u64 copyImage_param_4,
	.param .u64 copyImage_param_5,
	.param .u32 copyImage_param_6,
	.param .u32 copyImage_param_7,
	.param .u32 copyImage_param_8,
	.param .u32 copyImage_param_9,
	.param .u32 copyImage_param_10
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd1, [copyImage_param_0];
	ld.param.u64 	%rd2, [copyImage_param_1];
	ld.param.u64 	%rd3, [copyImage_param_2];
	ld.param.u64 	%rd4, [copyImage_param_3];
	ld.param.u64 	%rd5, [copyImage_param_4];
	ld.param.u64 	%rd6, [copyImage_param_5];
	ld.param.u32 	%r4, [copyImage_param_7];
	ld.param.u32 	%r5, [copyImage_param_8];
	ld.param.u32 	%r6, [copyImage_param_9];
	ld.param.u32 	%r7, [copyImage_param_10];
	mov.u32 	%r8, %ctaid.x;
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	mov.u32 	%r11, %ntid.y;
	mov.u32 	%r12, %ctaid.y;
	mov.u32 	%r13, %tid.y;
	mad.lo.s32 	%r2, %r12, %r11, %r13;
	mov.u32 	%r14, %ntid.z;
	mov.u32 	%r15, %ctaid.z;
	mov.u32 	%r16, %tid.z;
	mad.lo.s32 	%r3, %r15, %r14, %r16;
	setp.ge.s32 	%p1, %r1, %r5;
	setp.ge.s32 	%p2, %r2, %r6;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r7;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd7, %rd1;
	mad.lo.s32 	%r17, %r3, %r6, %r2;
	mad.lo.s32 	%r18, %r17, %r5, %r1;
	mad.lo.s32 	%r19, %r7, %r4, %r3;
	mad.lo.s32 	%r20, %r19, %r6, %r2;
	mad.lo.s32 	%r21, %r20, %r5, %r1;
	mul.wide.s32 	%rd8, %r21, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f1, [%rd9];
	cvta.to.global.u64 	%rd10, %rd4;
	mul.wide.s32 	%rd11, %r18, 4;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f1;
	cvta.to.global.u64 	%rd13, %rd2;
	add.s64 	%rd14, %rd13, %rd8;
	ld.global.nc.f32 	%f2, [%rd14];
	cvta.to.global.u64 	%rd15, %rd5;
	add.s64 	%rd16, %rd15, %rd11;
	st.global.f32 	[%rd16], %f2;
	cvta.to.global.u64 	%rd17, %rd3;
	add.s64 	%rd18, %rd17, %rd8;
	ld.global.nc.f32 	%f3, [%rd18];
	cvta.to.global.u64 	%rd19, %rd6;
	add.s64 	%rd20, %rd19, %rd11;
	st.global.f32 	[%rd20], %f3;

$L__BB0_2:
	ret;

}

`
)
