package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/kuchkin/mumax3-gneb/cuda/cu"
	"github.com/kuchkin/mumax3-gneb/timer"
	"sync"
	"unsafe"
)

// CUDA handle for gneb kernel
var gneb_code cu.Function

// Stores the arguments for gneb kernel invocation
type gneb_args_t struct {
	arg_Bx     unsafe.Pointer
	arg_By     unsafe.Pointer
	arg_Bz     unsafe.Pointer
	arg_Tx     unsafe.Pointer
	arg_Ty     unsafe.Pointer
	arg_Tz     unsafe.Pointer
	arg_mx     unsafe.Pointer
	arg_my     unsafe.Pointer
	arg_mz     unsafe.Pointer
	arg_Nx     int
	arg_Ny     int
	arg_Nz     int
	arg_noi    int
	arg_image  int
	arg_Tp     float32
	arg_Lp     float32
	arg_Ln     float32
	arg_k      float32
	arg_CIGNEB int
	arg_Pos    int
	argptr     [20]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for gneb kernel invocation
var gneb_args gneb_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	gneb_args.argptr[0] = unsafe.Pointer(&gneb_args.arg_Bx)
	gneb_args.argptr[1] = unsafe.Pointer(&gneb_args.arg_By)
	gneb_args.argptr[2] = unsafe.Pointer(&gneb_args.arg_Bz)
	gneb_args.argptr[3] = unsafe.Pointer(&gneb_args.arg_Tx)
	gneb_args.argptr[4] = unsafe.Pointer(&gneb_args.arg_Ty)
	gneb_args.argptr[5] = unsafe.Pointer(&gneb_args.arg_Tz)
	gneb_args.argptr[6] = unsafe.Pointer(&gneb_args.arg_mx)
	gneb_args.argptr[7] = unsafe.Pointer(&gneb_args.arg_my)
	gneb_args.argptr[8] = unsafe.Pointer(&gneb_args.arg_mz)
	gneb_args.argptr[9] = unsafe.Pointer(&gneb_args.arg_Nx)
	gneb_args.argptr[10] = unsafe.Pointer(&gneb_args.arg_Ny)
	gneb_args.argptr[11] = unsafe.Pointer(&gneb_args.arg_Nz)
	gneb_args.argptr[12] = unsafe.Pointer(&gneb_args.arg_noi)
	gneb_args.argptr[13] = unsafe.Pointer(&gneb_args.arg_image)
	gneb_args.argptr[14] = unsafe.Pointer(&gneb_args.arg_Tp)
	gneb_args.argptr[15] = unsafe.Pointer(&gneb_args.arg_Lp)
	gneb_args.argptr[16] = unsafe.Pointer(&gneb_args.arg_Ln)
	gneb_args.argptr[17] = unsafe.Pointer(&gneb_args.arg_k)
	gneb_args.argptr[18] = unsafe.Pointer(&gneb_args.arg_CIGNEB)
	gneb_args.argptr[19] = unsafe.Pointer(&gneb_args.arg_Pos)
}

// Wrapper for gneb CUDA kernel, asynchronous.
func k_gneb_async(Bx unsafe.Pointer, By unsafe.Pointer, Bz unsafe.Pointer, Tx unsafe.Pointer, Ty unsafe.Pointer, Tz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Nx int, Ny int, Nz int, noi int, image int, Tp float32, Lp float32, Ln float32, k float32, CIGNEB int, Pos int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("gneb")
	}

	gneb_args.Lock()
	defer gneb_args.Unlock()

	if gneb_code == 0 {
		gneb_code = fatbinLoad(gneb_map, "gneb")
	}

	gneb_args.arg_Bx = Bx
	gneb_args.arg_By = By
	gneb_args.arg_Bz = Bz
	gneb_args.arg_Tx = Tx
	gneb_args.arg_Ty = Ty
	gneb_args.arg_Tz = Tz
	gneb_args.arg_mx = mx
	gneb_args.arg_my = my
	gneb_args.arg_mz = mz
	gneb_args.arg_Nx = Nx
	gneb_args.arg_Ny = Ny
	gneb_args.arg_Nz = Nz
	gneb_args.arg_noi = noi
	gneb_args.arg_image = image
	gneb_args.arg_Tp = Tp
	gneb_args.arg_Lp = Lp
	gneb_args.arg_Ln = Ln
	gneb_args.arg_k = k
	gneb_args.arg_CIGNEB = CIGNEB
	gneb_args.arg_Pos = Pos

	args := gneb_args.argptr[:]
	cu.LaunchKernel(gneb_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("gneb")
	}
}

// maps compute capability on PTX code for gneb kernel.
var gneb_map = map[int]string{0: "",
	50: gneb_ptx_50}

// gneb PTX code for various compute capabilities.
const (
	gneb_ptx_50 = `
.version 7.5
.target sm_50
.address_size 64

	// .globl	gneb

.visible .entry gneb(
	.param .u64 gneb_param_0,
	.param .u64 gneb_param_1,
	.param .u64 gneb_param_2,
	.param .u64 gneb_param_3,
	.param .u64 gneb_param_4,
	.param .u64 gneb_param_5,
	.param .u64 gneb_param_6,
	.param .u64 gneb_param_7,
	.param .u64 gneb_param_8,
	.param .u32 gneb_param_9,
	.param .u32 gneb_param_10,
	.param .u32 gneb_param_11,
	.param .u32 gneb_param_12,
	.param .u32 gneb_param_13,
	.param .f32 gneb_param_14,
	.param .f32 gneb_param_15,
	.param .f32 gneb_param_16,
	.param .f32 gneb_param_17,
	.param .u32 gneb_param_18,
	.param .u32 gneb_param_19
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<37>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd1, [gneb_param_0];
	ld.param.u64 	%rd2, [gneb_param_1];
	ld.param.u64 	%rd3, [gneb_param_2];
	ld.param.u64 	%rd4, [gneb_param_3];
	ld.param.u64 	%rd5, [gneb_param_4];
	ld.param.u64 	%rd6, [gneb_param_5];
	ld.param.u64 	%rd7, [gneb_param_6];
	ld.param.u64 	%rd8, [gneb_param_7];
	ld.param.u64 	%rd9, [gneb_param_8];
	ld.param.u32 	%r4, [gneb_param_9];
	ld.param.u32 	%r5, [gneb_param_10];
	ld.param.u32 	%r6, [gneb_param_11];
	ld.param.u32 	%r7, [gneb_param_12];
	ld.param.u32 	%r8, [gneb_param_13];
	ld.param.f32 	%f1, [gneb_param_14];
	ld.param.f32 	%f2, [gneb_param_15];
	ld.param.f32 	%f3, [gneb_param_16];
	ld.param.f32 	%f4, [gneb_param_17];
	ld.param.u32 	%r9, [gneb_param_18];
	ld.param.u32 	%r10, [gneb_param_19];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r1, %r12, %r11, %r13;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r2, %r15, %r14, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r3, %r18, %r17, %r19;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_3;

	div.s32 	%r20, %r6, %r7;
	div.s32 	%r21, %r3, %r20;
	setp.ne.s32 	%p6, %r21, %r8;
	@%p6 bra 	$L__BB0_3;

	mad.lo.s32 	%r22, %r3, %r5, %r2;
	mad.lo.s32 	%r23, %r22, %r4, %r1;
	cvta.to.global.u64 	%rd10, %rd4;
	mul.wide.s32 	%rd11, %r23, 4;
	add.s64 	%rd12, %rd10, %rd11;
	sqrt.rn.f32 	%f5, %f1;
	ld.global.nc.f32 	%f6, [%rd12];
	div.rn.f32 	%f7, %f6, %f5;
	cvta.to.global.u64 	%rd13, %rd5;
	add.s64 	%rd14, %rd13, %rd11;
	ld.global.nc.f32 	%f8, [%rd14];
	div.rn.f32 	%f9, %f8, %f5;
	cvta.to.global.u64 	%rd15, %rd6;
	add.s64 	%rd16, %rd15, %rd11;
	ld.global.nc.f32 	%f10, [%rd16];
	div.rn.f32 	%f11, %f10, %f5;
	cvta.to.global.u64 	%rd17, %rd7;
	add.s64 	%rd18, %rd17, %rd11;
	cvta.to.global.u64 	%rd19, %rd8;
	add.s64 	%rd20, %rd19, %rd11;
	cvta.to.global.u64 	%rd21, %rd9;
	add.s64 	%rd22, %rd21, %rd11;
	cvta.to.global.u64 	%rd23, %rd1;
	add.s64 	%rd24, %rd23, %rd11;
	cvta.to.global.u64 	%rd25, %rd2;
	add.s64 	%rd26, %rd25, %rd11;
	cvta.to.global.u64 	%rd27, %rd3;
	add.s64 	%rd28, %rd27, %rd11;
	setp.eq.s32 	%p7, %r8, %r10;
	setp.eq.s32 	%p8, %r9, 1;
	and.pred  	%p9, %p8, %p7;
	ld.global.f32 	%f12, [%rd24];
	ld.global.f32 	%f13, [%rd26];
	mul.f32 	%f14, %f9, %f13;
	fma.rn.f32 	%f15, %f7, %f12, %f14;
	ld.global.f32 	%f16, [%rd28];
	fma.rn.f32 	%f17, %f11, %f16, %f15;
	mul.f32 	%f18, %f17, 0fC0000000;
	sub.f32 	%f19, %f3, %f2;
	fma.rn.f32 	%f20, %f19, %f4, %f17;
	selp.f32 	%f21, %f18, %f20, %p9;
	fma.rn.f32 	%f22, %f7, %f21, %f12;
	fma.rn.f32 	%f23, %f9, %f21, %f13;
	fma.rn.f32 	%f24, %f11, %f21, %f16;
	ld.global.nc.f32 	%f25, [%rd18];
	ld.global.nc.f32 	%f26, [%rd20];
	mul.f32 	%f27, %f26, %f23;
	fma.rn.f32 	%f28, %f25, %f22, %f27;
	ld.global.nc.f32 	%f29, [%rd22];
	fma.rn.f32 	%f30, %f29, %f24, %f28;
	mul.f32 	%f31, %f25, %f30;
	sub.f32 	%f32, %f22, %f31;
	st.global.f32 	[%rd24], %f32;
	mul.f32 	%f33, %f26, %f30;
	sub.f32 	%f34, %f23, %f33;
	st.global.f32 	[%rd26], %f34;
	mul.f32 	%f35, %f29, %f30;
	sub.f32 	%f36, %f24, %f35;
	st.global.f32 	[%rd28], %f36;

$L__BB0_3:
	ret;

}

`
)
