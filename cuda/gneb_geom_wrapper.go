package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/kuchkin/mumax3-gneb/cuda/cu"
	"github.com/kuchkin/mumax3-gneb/timer"
	"sync"
	"unsafe"
)

// CUDA handle for geom_vpo kernel
var geom_vpo_code cu.Function

// Stores the arguments for geom_vpo kernel invocation
type geom_vpo_args_t struct {
	arg_Bx  unsafe.Pointer
	arg_By  unsafe.Pointer
	arg_Bz  unsafe.Pointer
	arg_vol unsafe.Pointer
	arg_N   int
	arg_Nz  int
	argptr  [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for geom_vpo kernel invocation
var geom_vpo_args geom_vpo_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	geom_vpo_args.argptr[0] = unsafe.Pointer(&geom_vpo_args.arg_Bx)
	geom_vpo_args.argptr[1] = unsafe.Pointer(&geom_vpo_args.arg_By)
	geom_vpo_args.argptr[2] = unsafe.Pointer(&geom_vpo_args.arg_Bz)
	geom_vpo_args.argptr[3] = unsafe.Pointer(&geom_vpo_args.arg_vol)
	geom_vpo_args.argptr[4] = unsafe.Pointer(&geom_vpo_args.arg_N)
	geom_vpo_args.argptr[5] = unsafe.Pointer(&geom_vpo_args.arg_Nz)
}

// Wrapper for geom_vpo CUDA kernel, asynchronous.
func k_geom_vpo_async(Bx unsafe.Pointer, By unsafe.Pointer, Bz unsafe.Pointer, vol unsafe.Pointer, N int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("geom_vpo")
	}

	geom_vpo_args.Lock()
	defer geom_vpo_args.Unlock()

	if geom_vpo_code == 0 {
		geom_vpo_code = fatbinLoad(geom_vpo_map, "geom_vpo")
	}

	geom_vpo_args.arg_Bx = Bx
	geom_vpo_args.arg_By = By
	geom_vpo_args.arg_Bz = Bz
	geom_vpo_args.arg_vol = vol
	geom_vpo_args.arg_N = N
	geom_vpo_args.arg_Nz = Nz

	args := geom_vpo_args.argptr[:]
	cu.LaunchKernel(geom_vpo_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("geom_vpo")
	}
}

// maps compute capability on PTX code for geom_vpo kernel.
var geom_vpo_map = map[int]string{0: "",
	50: geom_vpo_ptx_50}

// geom_vpo PTX code for various compute capabilities.
const (
	geom_vpo_ptx_50 = `
.version 7.5
.target sm_50
.address_size 64

	// .globl	geom_vpo

.visible .entry geom_vpo(
	.param .u64 geom_vpo_param_0,
	.param .u64 geom_vpo_param_1,
	.param .u64 geom_vpo_param_2,
	.param .u64 geom_vpo_param_3,
	.param .u32 geom_vpo_param_4,
	.param .u32 geom_vpo_param_5
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd1, [geom_vpo_param_0];
	ld.param.u64 	%rd2, [geom_vpo_param_1];
	ld.param.u64 	%rd3, [geom_vpo_param_2];
	ld.param.u64 	%rd4, [geom_vpo_param_3];
	ld.param.u32 	%r2, [geom_vpo_param_4];
	mov.u32 	%r3, %ctaid.y;
	mov.u32 	%r4, %nctaid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd5, %rd4;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	cvta.to.global.u64 	%rd8, %rd1;
	add.s64 	%rd9, %rd8, %rd6;
	ld.global.f32 	%f1, [%rd9];
	ld.global.nc.f32 	%f2, [%rd7];
	mul.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd9], %f3;
	cvta.to.global.u64 	%rd10, %rd2;
	add.s64 	%rd11, %rd10, %rd6;
	ld.global.f32 	%f4, [%rd11];
	mul.f32 	%f5, %f2, %f4;
	st.global.f32 	[%rd11], %f5;
	cvta.to.global.u64 	%rd12, %rd3;
	add.s64 	%rd13, %rd12, %rd6;
	ld.global.f32 	%f6, [%rd13];
	mul.f32 	%f7, %f2, %f6;
	st.global.f32 	[%rd13], %f7;

$L__BB0_2:
	ret;

}

`
)
