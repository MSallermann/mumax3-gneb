package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/kuchkin/mumax3-gneb/cuda/cu"
	"github.com/kuchkin/mumax3-gneb/timer"
	"sync"
	"unsafe"
)

// CUDA handle for get_velocity kernel
var get_velocity_code cu.Function

// Stores the arguments for get_velocity kernel invocation
type get_velocity_args_t struct {
	arg_vx unsafe.Pointer
	arg_vy unsafe.Pointer
	arg_vz unsafe.Pointer
	arg_kx unsafe.Pointer
	arg_ky unsafe.Pointer
	arg_kz unsafe.Pointer
	arg_m1 unsafe.Pointer
	arg_m2 unsafe.Pointer
	arg_N  int
	arg_Nz int
	argptr [10]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for get_velocity kernel invocation
var get_velocity_args get_velocity_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	get_velocity_args.argptr[0] = unsafe.Pointer(&get_velocity_args.arg_vx)
	get_velocity_args.argptr[1] = unsafe.Pointer(&get_velocity_args.arg_vy)
	get_velocity_args.argptr[2] = unsafe.Pointer(&get_velocity_args.arg_vz)
	get_velocity_args.argptr[3] = unsafe.Pointer(&get_velocity_args.arg_kx)
	get_velocity_args.argptr[4] = unsafe.Pointer(&get_velocity_args.arg_ky)
	get_velocity_args.argptr[5] = unsafe.Pointer(&get_velocity_args.arg_kz)
	get_velocity_args.argptr[6] = unsafe.Pointer(&get_velocity_args.arg_m1)
	get_velocity_args.argptr[7] = unsafe.Pointer(&get_velocity_args.arg_m2)
	get_velocity_args.argptr[8] = unsafe.Pointer(&get_velocity_args.arg_N)
	get_velocity_args.argptr[9] = unsafe.Pointer(&get_velocity_args.arg_Nz)
}

// Wrapper for get_velocity CUDA kernel, asynchronous.
func k_get_velocity_async(vx unsafe.Pointer, vy unsafe.Pointer, vz unsafe.Pointer, kx unsafe.Pointer, ky unsafe.Pointer, kz unsafe.Pointer, m1 unsafe.Pointer, m2 unsafe.Pointer, N int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("get_velocity")
	}

	get_velocity_args.Lock()
	defer get_velocity_args.Unlock()

	if get_velocity_code == 0 {
		get_velocity_code = fatbinLoad(get_velocity_map, "get_velocity")
	}

	get_velocity_args.arg_vx = vx
	get_velocity_args.arg_vy = vy
	get_velocity_args.arg_vz = vz
	get_velocity_args.arg_kx = kx
	get_velocity_args.arg_ky = ky
	get_velocity_args.arg_kz = kz
	get_velocity_args.arg_m1 = m1
	get_velocity_args.arg_m2 = m2
	get_velocity_args.arg_N = N
	get_velocity_args.arg_Nz = Nz

	args := get_velocity_args.argptr[:]
	cu.LaunchKernel(get_velocity_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("get_velocity")
	}
}

// maps compute capability on PTX code for get_velocity kernel.
var get_velocity_map = map[int]string{0: "",
	50: get_velocity_ptx_50}

// get_velocity PTX code for various compute capabilities.
const (
	get_velocity_ptx_50 = `
.version 7.5
.target sm_50
.address_size 64

	// .globl	get_velocity

.visible .entry get_velocity(
	.param .u64 get_velocity_param_0,
	.param .u64 get_velocity_param_1,
	.param .u64 get_velocity_param_2,
	.param .u64 get_velocity_param_3,
	.param .u64 get_velocity_param_4,
	.param .u64 get_velocity_param_5,
	.param .u64 get_velocity_param_6,
	.param .u64 get_velocity_param_7,
	.param .u32 get_velocity_param_8,
	.param .u32 get_velocity_param_9
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<13>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<28>;


	ld.param.u64 	%rd1, [get_velocity_param_0];
	ld.param.u64 	%rd2, [get_velocity_param_1];
	ld.param.u64 	%rd3, [get_velocity_param_2];
	ld.param.u64 	%rd4, [get_velocity_param_3];
	ld.param.u64 	%rd5, [get_velocity_param_4];
	ld.param.u64 	%rd6, [get_velocity_param_5];
	ld.param.u64 	%rd7, [get_velocity_param_6];
	ld.param.u64 	%rd8, [get_velocity_param_7];
	ld.param.u32 	%r2, [get_velocity_param_8];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_4;

	cvta.to.global.u64 	%rd9, %rd7;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	ld.global.nc.f32 	%f1, [%rd11];
	setp.lt.f32 	%p2, %f1, 0f00000000;
	mov.f32 	%f12, 0f00000000;
	@%p2 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd12, %rd8;
	add.s64 	%rd14, %rd12, %rd10;
	ld.global.nc.f32 	%f5, [%rd14];
	div.rn.f32 	%f12, %f1, %f5;

$L__BB0_3:
	cvta.to.global.u64 	%rd15, %rd4;
	add.s64 	%rd17, %rd15, %rd10;
	ld.global.nc.f32 	%f6, [%rd17];
	mul.f32 	%f7, %f12, %f6;
	cvta.to.global.u64 	%rd18, %rd1;
	add.s64 	%rd19, %rd18, %rd10;
	st.global.f32 	[%rd19], %f7;
	cvta.to.global.u64 	%rd20, %rd5;
	add.s64 	%rd21, %rd20, %rd10;
	ld.global.nc.f32 	%f8, [%rd21];
	mul.f32 	%f9, %f12, %f8;
	cvta.to.global.u64 	%rd22, %rd2;
	add.s64 	%rd23, %rd22, %rd10;
	st.global.f32 	[%rd23], %f9;
	cvta.to.global.u64 	%rd24, %rd6;
	add.s64 	%rd25, %rd24, %rd10;
	ld.global.nc.f32 	%f10, [%rd25];
	mul.f32 	%f11, %f12, %f10;
	cvta.to.global.u64 	%rd26, %rd3;
	add.s64 	%rd27, %rd26, %rd10;
	st.global.f32 	[%rd27], %f11;

$L__BB0_4:
	ret;

}

`
)
