package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/kuchkin/mumax3-gneb/cuda/cu"
	"github.com/kuchkin/mumax3-gneb/timer"
	"sync"
	"unsafe"
)

// CUDA handle for getphi kernel
var getphi_code cu.Function

// Stores the arguments for getphi kernel invocation
type getphi_args_t struct {
	arg_dst       unsafe.Pointer
	arg_src       unsafe.Pointer
	arg_prefactor float32
	arg_ax        unsafe.Pointer
	arg_ay        unsafe.Pointer
	arg_az        unsafe.Pointer
	arg_bx        unsafe.Pointer
	arg_by        unsafe.Pointer
	arg_bz        unsafe.Pointer
	arg_N         int
	argptr        [10]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for getphi kernel invocation
var getphi_args getphi_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	getphi_args.argptr[0] = unsafe.Pointer(&getphi_args.arg_dst)
	getphi_args.argptr[1] = unsafe.Pointer(&getphi_args.arg_src)
	getphi_args.argptr[2] = unsafe.Pointer(&getphi_args.arg_prefactor)
	getphi_args.argptr[3] = unsafe.Pointer(&getphi_args.arg_ax)
	getphi_args.argptr[4] = unsafe.Pointer(&getphi_args.arg_ay)
	getphi_args.argptr[5] = unsafe.Pointer(&getphi_args.arg_az)
	getphi_args.argptr[6] = unsafe.Pointer(&getphi_args.arg_bx)
	getphi_args.argptr[7] = unsafe.Pointer(&getphi_args.arg_by)
	getphi_args.argptr[8] = unsafe.Pointer(&getphi_args.arg_bz)
	getphi_args.argptr[9] = unsafe.Pointer(&getphi_args.arg_N)
}

// Wrapper for getphi CUDA kernel, asynchronous.
func k_getphi_async(dst unsafe.Pointer, src unsafe.Pointer, prefactor float32, ax unsafe.Pointer, ay unsafe.Pointer, az unsafe.Pointer, bx unsafe.Pointer, by unsafe.Pointer, bz unsafe.Pointer, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("getphi")
	}

	getphi_args.Lock()
	defer getphi_args.Unlock()

	if getphi_code == 0 {
		getphi_code = fatbinLoad(getphi_map, "getphi")
	}

	getphi_args.arg_dst = dst
	getphi_args.arg_src = src
	getphi_args.arg_prefactor = prefactor
	getphi_args.arg_ax = ax
	getphi_args.arg_ay = ay
	getphi_args.arg_az = az
	getphi_args.arg_bx = bx
	getphi_args.arg_by = by
	getphi_args.arg_bz = bz
	getphi_args.arg_N = N

	args := getphi_args.argptr[:]
	cu.LaunchKernel(getphi_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("getphi")
	}
}

// maps compute capability on PTX code for getphi kernel.
var getphi_map = map[int]string{0: "",
	50: getphi_ptx_50}

// getphi PTX code for various compute capabilities.
const (
	getphi_ptx_50 = `
.version 7.5
.target sm_50
.address_size 64

	// .globl	getphi

.visible .entry getphi(
	.param .u64 getphi_param_0,
	.param .u64 getphi_param_1,
	.param .f32 getphi_param_2,
	.param .u64 getphi_param_3,
	.param .u64 getphi_param_4,
	.param .u64 getphi_param_5,
	.param .u64 getphi_param_6,
	.param .u64 getphi_param_7,
	.param .u64 getphi_param_8,
	.param .u32 getphi_param_9
)
{
	.reg .pred 	%p<12>;
	.reg .f32 	%f<65>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<27>;


	ld.param.u64 	%rd1, [getphi_param_0];
	ld.param.u64 	%rd2, [getphi_param_1];
	ld.param.u64 	%rd3, [getphi_param_3];
	ld.param.u64 	%rd4, [getphi_param_4];
	ld.param.u64 	%rd5, [getphi_param_5];
	ld.param.u64 	%rd6, [getphi_param_6];
	ld.param.u64 	%rd7, [getphi_param_7];
	ld.param.u64 	%rd8, [getphi_param_8];
	ld.param.u32 	%r4, [getphi_param_9];
	mov.u32 	%r5, %ctaid.y;
	mov.u32 	%r6, %nctaid.x;
	mov.u32 	%r7, %ctaid.x;
	mad.lo.s32 	%r8, %r5, %r6, %r7;
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	setp.ge.s32 	%p1, %r1, %r4;
	@%p1 bra 	$L__BB0_7;

	cvta.to.global.u64 	%rd9, %rd3;
	mul.wide.s32 	%rd10, %r1, 4;
	add.s64 	%rd11, %rd9, %rd10;
	cvta.to.global.u64 	%rd12, %rd4;
	add.s64 	%rd13, %rd12, %rd10;
	cvta.to.global.u64 	%rd14, %rd5;
	add.s64 	%rd15, %rd14, %rd10;
	cvta.to.global.u64 	%rd16, %rd6;
	add.s64 	%rd17, %rd16, %rd10;
	cvta.to.global.u64 	%rd18, %rd7;
	add.s64 	%rd19, %rd18, %rd10;
	cvta.to.global.u64 	%rd20, %rd8;
	add.s64 	%rd21, %rd20, %rd10;
	ld.global.nc.f32 	%f7, [%rd21];
	ld.global.nc.f32 	%f8, [%rd13];
	mul.f32 	%f9, %f8, %f7;
	ld.global.nc.f32 	%f10, [%rd19];
	ld.global.nc.f32 	%f11, [%rd15];
	mul.f32 	%f12, %f11, %f10;
	sub.f32 	%f13, %f9, %f12;
	ld.global.nc.f32 	%f14, [%rd17];
	mul.f32 	%f15, %f11, %f14;
	ld.global.nc.f32 	%f16, [%rd11];
	mul.f32 	%f17, %f16, %f7;
	sub.f32 	%f18, %f15, %f17;
	mul.f32 	%f19, %f16, %f10;
	mul.f32 	%f20, %f8, %f14;
	sub.f32 	%f21, %f19, %f20;
	mul.f32 	%f22, %f18, %f18;
	fma.rn.f32 	%f23, %f13, %f13, %f22;
	fma.rn.f32 	%f24, %f21, %f21, %f23;
	sqrt.rn.f32 	%f25, %f24;
	mul.f32 	%f26, %f8, %f8;
	fma.rn.f32 	%f27, %f16, %f16, %f26;
	fma.rn.f32 	%f28, %f11, %f11, %f27;
	sqrt.rn.f32 	%f29, %f28;
	mul.f32 	%f30, %f10, %f10;
	fma.rn.f32 	%f31, %f14, %f14, %f30;
	fma.rn.f32 	%f32, %f7, %f7, %f31;
	sqrt.rn.f32 	%f33, %f32;
	mul.f32 	%f34, %f29, %f33;
	div.rn.f32 	%f35, %f25, %f34;
	cvta.to.global.u64 	%rd22, %rd2;
	add.s64 	%rd23, %rd22, %rd10;
	ld.global.nc.f32 	%f36, [%rd23];
	abs.f32 	%f1, %f36;
	abs.f32 	%f2, %f35;
	setp.eq.f32 	%p2, %f1, 0f00000000;
	setp.eq.f32 	%p3, %f2, 0f00000000;
	and.pred  	%p4, %p2, %p3;
	mov.b32 	%r2, %f36;
	mov.b32 	%r11, %f35;
	and.b32  	%r3, %r11, -2147483648;
	@%p4 bra 	$L__BB0_5;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	shr.s32 	%r16, %r2, 31;
	and.b32  	%r17, %r16, 1078530011;
	or.b32  	%r18, %r17, %r3;
	mov.b32 	%f64, %r18;
	bra.uni 	$L__BB0_6;

$L__BB0_2:
	setp.eq.f32 	%p5, %f1, 0f7F800000;
	setp.eq.f32 	%p6, %f2, 0f7F800000;
	and.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;

$L__BB0_4:
	setp.lt.s32 	%p11, %r2, 0;
	selp.b32 	%r14, 1075235812, 1061752795, %p11;
	or.b32  	%r15, %r14, %r3;
	mov.b32 	%f64, %r15;
	bra.uni 	$L__BB0_6;

$L__BB0_3:
	setp.lt.s32 	%p8, %r2, 0;
	min.f32 	%f37, %f2, %f1;
	max.f32 	%f38, %f2, %f1;
	div.rn.f32 	%f39, %f37, %f38;
	mul.rn.f32 	%f40, %f39, %f39;
	mov.f32 	%f41, 0fC0B59883;
	mov.f32 	%f42, 0fBF52C7EA;
	fma.rn.f32 	%f43, %f40, %f42, %f41;
	mov.f32 	%f44, 0fC0D21907;
	fma.rn.f32 	%f45, %f43, %f40, %f44;
	mul.f32 	%f46, %f40, %f45;
	mul.f32 	%f47, %f39, %f46;
	add.f32 	%f48, %f40, 0f41355DC0;
	mov.f32 	%f49, 0f41E6BD60;
	fma.rn.f32 	%f50, %f48, %f40, %f49;
	mov.f32 	%f51, 0f419D92C8;
	fma.rn.f32 	%f52, %f50, %f40, %f51;
	rcp.rn.f32 	%f53, %f52;
	fma.rn.f32 	%f54, %f47, %f53, %f39;
	mov.f32 	%f55, 0f3FC90FDB;
	sub.f32 	%f56, %f55, %f54;
	setp.gt.f32 	%p9, %f2, %f1;
	selp.f32 	%f57, %f56, %f54, %p9;
	mov.f32 	%f58, 0f40490FDB;
	sub.f32 	%f59, %f58, %f57;
	selp.f32 	%f60, %f59, %f57, %p8;
	mov.b32 	%r12, %f60;
	or.b32  	%r13, %r3, %r12;
	mov.b32 	%f61, %r13;
	add.f32 	%f62, %f1, %f2;
	setp.le.f32 	%p10, %f62, 0f7F800000;
	selp.f32 	%f64, %f61, %f62, %p10;

$L__BB0_6:
	cvta.to.global.u64 	%rd24, %rd1;
	add.s64 	%rd26, %rd24, %rd10;
	mul.f32 	%f63, %f64, %f64;
	st.global.f32 	[%rd26], %f63;

$L__BB0_7:
	ret;

}

`
)
