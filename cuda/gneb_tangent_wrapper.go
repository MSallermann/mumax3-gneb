package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/kuchkin/mumax3-gneb/cuda/cu"
	"github.com/kuchkin/mumax3-gneb/timer"
	"sync"
	"unsafe"
)

// CUDA handle for tangent kernel
var tangent_code cu.Function

// Stores the arguments for tangent kernel invocation
type tangent_args_t struct {
	arg_Tx    unsafe.Pointer
	arg_Ty    unsafe.Pointer
	arg_Tz    unsafe.Pointer
	arg_mx    unsafe.Pointer
	arg_my    unsafe.Pointer
	arg_mz    unsafe.Pointer
	arg_Nx    int
	arg_Ny    int
	arg_Nz    int
	arg_noi   int
	arg_image int
	arg_Ep    float32
	arg_Ei    float32
	arg_En    float32
	arg_Lp    float32
	arg_Ln    float32
	argptr    [16]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for tangent kernel invocation
var tangent_args tangent_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	tangent_args.argptr[0] = unsafe.Pointer(&tangent_args.arg_Tx)
	tangent_args.argptr[1] = unsafe.Pointer(&tangent_args.arg_Ty)
	tangent_args.argptr[2] = unsafe.Pointer(&tangent_args.arg_Tz)
	tangent_args.argptr[3] = unsafe.Pointer(&tangent_args.arg_mx)
	tangent_args.argptr[4] = unsafe.Pointer(&tangent_args.arg_my)
	tangent_args.argptr[5] = unsafe.Pointer(&tangent_args.arg_mz)
	tangent_args.argptr[6] = unsafe.Pointer(&tangent_args.arg_Nx)
	tangent_args.argptr[7] = unsafe.Pointer(&tangent_args.arg_Ny)
	tangent_args.argptr[8] = unsafe.Pointer(&tangent_args.arg_Nz)
	tangent_args.argptr[9] = unsafe.Pointer(&tangent_args.arg_noi)
	tangent_args.argptr[10] = unsafe.Pointer(&tangent_args.arg_image)
	tangent_args.argptr[11] = unsafe.Pointer(&tangent_args.arg_Ep)
	tangent_args.argptr[12] = unsafe.Pointer(&tangent_args.arg_Ei)
	tangent_args.argptr[13] = unsafe.Pointer(&tangent_args.arg_En)
	tangent_args.argptr[14] = unsafe.Pointer(&tangent_args.arg_Lp)
	tangent_args.argptr[15] = unsafe.Pointer(&tangent_args.arg_Ln)
}

// Wrapper for tangent CUDA kernel, asynchronous.
func k_tangent_async(Tx unsafe.Pointer, Ty unsafe.Pointer, Tz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Nx int, Ny int, Nz int, noi int, image int, Ep float32, Ei float32, En float32, Lp float32, Ln float32, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("tangent")
	}

	tangent_args.Lock()
	defer tangent_args.Unlock()

	if tangent_code == 0 {
		tangent_code = fatbinLoad(tangent_map, "tangent")
	}

	tangent_args.arg_Tx = Tx
	tangent_args.arg_Ty = Ty
	tangent_args.arg_Tz = Tz
	tangent_args.arg_mx = mx
	tangent_args.arg_my = my
	tangent_args.arg_mz = mz
	tangent_args.arg_Nx = Nx
	tangent_args.arg_Ny = Ny
	tangent_args.arg_Nz = Nz
	tangent_args.arg_noi = noi
	tangent_args.arg_image = image
	tangent_args.arg_Ep = Ep
	tangent_args.arg_Ei = Ei
	tangent_args.arg_En = En
	tangent_args.arg_Lp = Lp
	tangent_args.arg_Ln = Ln

	args := tangent_args.argptr[:]
	cu.LaunchKernel(tangent_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("tangent")
	}
}

// maps compute capability on PTX code for tangent kernel.
var tangent_map = map[int]string{0: "",
	50: tangent_ptx_50}

// tangent PTX code for various compute capabilities.
const (
	tangent_ptx_50 = `
.version 7.5
.target sm_50
.address_size 64

	// .globl	tangent

.visible .entry tangent(
	.param .u64 tangent_param_0,
	.param .u64 tangent_param_1,
	.param .u64 tangent_param_2,
	.param .u64 tangent_param_3,
	.param .u64 tangent_param_4,
	.param .u64 tangent_param_5,
	.param .u32 tangent_param_6,
	.param .u32 tangent_param_7,
	.param .u32 tangent_param_8,
	.param .u32 tangent_param_9,
	.param .u32 tangent_param_10,
	.param .f32 tangent_param_11,
	.param .f32 tangent_param_12,
	.param .f32 tangent_param_13,
	.param .f32 tangent_param_14,
	.param .f32 tangent_param_15
)
{
	.reg .pred 	%p<18>;
	.reg .f32 	%f<45>;
	.reg .b32 	%r<28>;
	.reg .f64 	%fd<15>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd1, [tangent_param_0];
	ld.param.u64 	%rd2, [tangent_param_1];
	ld.param.u64 	%rd3, [tangent_param_2];
	ld.param.u64 	%rd4, [tangent_param_3];
	ld.param.u64 	%rd5, [tangent_param_4];
	ld.param.u64 	%rd6, [tangent_param_5];
	ld.param.u32 	%r6, [tangent_param_6];
	ld.param.u32 	%r7, [tangent_param_7];
	ld.param.u32 	%r8, [tangent_param_8];
	ld.param.u32 	%r9, [tangent_param_9];
	ld.param.u32 	%r10, [tangent_param_10];
	ld.param.f32 	%f20, [tangent_param_11];
	ld.param.f32 	%f21, [tangent_param_12];
	ld.param.f32 	%f22, [tangent_param_13];
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r1, %r12, %r11, %r13;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r2, %r15, %r14, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r3, %r18, %r17, %r19;
	setp.ge.s32 	%p1, %r1, %r6;
	setp.ge.s32 	%p2, %r2, %r7;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r8;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_8;

	div.s32 	%r4, %r8, %r9;
	div.s32 	%r20, %r3, %r4;
	setp.ne.s32 	%p6, %r20, %r10;
	@%p6 bra 	$L__BB0_8;

	cvta.to.global.u64 	%rd7, %rd6;
	cvta.to.global.u64 	%rd8, %rd5;
	cvta.to.global.u64 	%rd9, %rd4;
	mad.lo.s32 	%r21, %r3, %r7, %r2;
	mad.lo.s32 	%r5, %r21, %r6, %r1;
	mul.wide.s32 	%rd10, %r5, 4;
	add.s64 	%rd11, %rd9, %rd10;
	add.s64 	%rd12, %rd8, %rd10;
	add.s64 	%rd13, %rd7, %rd10;
	sub.s32 	%r22, %r3, %r4;
	mad.lo.s32 	%r23, %r22, %r7, %r2;
	mad.lo.s32 	%r24, %r23, %r6, %r1;
	mul.wide.s32 	%rd14, %r24, 4;
	add.s64 	%rd15, %rd9, %rd14;
	add.s64 	%rd16, %rd8, %rd14;
	add.s64 	%rd17, %rd7, %rd14;
	add.s32 	%r25, %r4, %r3;
	mad.lo.s32 	%r26, %r25, %r7, %r2;
	mad.lo.s32 	%r27, %r26, %r6, %r1;
	mul.wide.s32 	%rd18, %r27, 4;
	add.s64 	%rd19, %rd9, %rd18;
	add.s64 	%rd20, %rd8, %rd18;
	add.s64 	%rd21, %rd7, %rd18;
	ld.global.nc.f32 	%f23, [%rd19];
	ld.global.nc.f32 	%f1, [%rd11];
	sub.f32 	%f2, %f23, %f1;
	ld.global.nc.f32 	%f24, [%rd20];
	ld.global.nc.f32 	%f3, [%rd12];
	sub.f32 	%f4, %f24, %f3;
	ld.global.nc.f32 	%f25, [%rd21];
	ld.global.nc.f32 	%f5, [%rd13];
	sub.f32 	%f6, %f25, %f5;
	ld.global.nc.f32 	%f26, [%rd15];
	sub.f32 	%f7, %f1, %f26;
	ld.global.nc.f32 	%f27, [%rd16];
	sub.f32 	%f8, %f3, %f27;
	ld.global.nc.f32 	%f28, [%rd17];
	sub.f32 	%f9, %f5, %f28;
	setp.gt.f32 	%p7, %f21, %f20;
	setp.gt.f32 	%p8, %f22, %f21;
	and.pred  	%p9, %p7, %p8;
	mov.f32 	%f42, %f2;
	mov.f32 	%f43, %f4;
	mov.f32 	%f44, %f6;
	@%p9 bra 	$L__BB0_7;

	setp.lt.f32 	%p10, %f22, %f21;
	setp.lt.f32 	%p11, %f21, %f20;
	and.pred  	%p12, %p11, %p10;
	mov.f32 	%f42, %f7;
	mov.f32 	%f43, %f8;
	mov.f32 	%f44, %f9;
	@%p12 bra 	$L__BB0_7;

	sub.f32 	%f29, %f22, %f21;
	setp.gt.f32 	%p13, %f29, 0f00000000;
	cvt.f64.f32 	%fd1, %f29;
	cvt.f64.f32 	%fd2, %f22;
	neg.f64 	%fd3, %fd2;
	cvt.f64.f32 	%fd4, %f21;
	sub.f64 	%fd5, %fd3, %fd4;
	selp.f64 	%fd6, %fd1, %fd5, %p13;
	sub.f32 	%f30, %f20, %f21;
	setp.gt.f32 	%p14, %f30, 0f00000000;
	cvt.f64.f32 	%fd7, %f30;
	cvt.f64.f32 	%fd8, %f20;
	neg.f64 	%fd9, %fd8;
	sub.f64 	%fd10, %fd9, %fd4;
	selp.f64 	%fd11, %fd7, %fd10, %p14;
	setp.gt.f64 	%p15, %fd6, %fd11;
	selp.f64 	%fd12, %fd6, %fd11, %p15;
	add.f64 	%fd13, %fd12, 0d3E45798EE2308C3A;
	cvt.rn.f32.f64 	%f31, %fd13;
	setp.lt.f64 	%p16, %fd6, %fd11;
	selp.f64 	%fd14, %fd6, %fd11, %p16;
	cvt.rn.f32.f64 	%f32, %fd14;
	div.rn.f32 	%f10, %f32, %f31;
	setp.gt.f32 	%p17, %f22, %f20;
	@%p17 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_6:
	fma.rn.f32 	%f42, %f7, %f10, %f2;
	fma.rn.f32 	%f43, %f8, %f10, %f4;
	fma.rn.f32 	%f44, %f9, %f10, %f6;
	bra.uni 	$L__BB0_7;

$L__BB0_5:
	fma.rn.f32 	%f42, %f2, %f10, %f7;
	fma.rn.f32 	%f43, %f4, %f10, %f8;
	fma.rn.f32 	%f44, %f6, %f10, %f9;

$L__BB0_7:
	mul.f32 	%f33, %f3, %f43;
	fma.rn.f32 	%f34, %f1, %f42, %f33;
	fma.rn.f32 	%f35, %f5, %f44, %f34;
	mul.f32 	%f36, %f1, %f35;
	sub.f32 	%f37, %f42, %f36;
	cvta.to.global.u64 	%rd22, %rd1;
	add.s64 	%rd24, %rd22, %rd10;
	st.global.f32 	[%rd24], %f37;
	mul.f32 	%f38, %f3, %f35;
	sub.f32 	%f39, %f43, %f38;
	cvta.to.global.u64 	%rd25, %rd2;
	add.s64 	%rd26, %rd25, %rd10;
	st.global.f32 	[%rd26], %f39;
	mul.f32 	%f40, %f5, %f35;
	sub.f32 	%f41, %f44, %f40;
	cvta.to.global.u64 	%rd27, %rd3;
	add.s64 	%rd28, %rd27, %rd10;
	st.global.f32 	[%rd28], %f41;

$L__BB0_8:
	ret;

}

`
)
