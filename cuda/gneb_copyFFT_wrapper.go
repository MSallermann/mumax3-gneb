package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/kuchkin/mumax3-gneb/cuda/cu"
	"github.com/kuchkin/mumax3-gneb/timer"
	"sync"
	"unsafe"
)

// CUDA handle for copyFFT kernel
var copyFFT_code cu.Function

// Stores the arguments for copyFFT kernel invocation
type copyFFT_args_t struct {
	arg_fft2x unsafe.Pointer
	arg_fft2y unsafe.Pointer
	arg_fft2z unsafe.Pointer
	arg_fftx  unsafe.Pointer
	arg_ffty  unsafe.Pointer
	arg_fftz  unsafe.Pointer
	arg_noi   int
	arg_image int
	arg_Nx    int
	arg_Ny    int
	arg_Nz    int
	argptr    [11]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for copyFFT kernel invocation
var copyFFT_args copyFFT_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	copyFFT_args.argptr[0] = unsafe.Pointer(&copyFFT_args.arg_fft2x)
	copyFFT_args.argptr[1] = unsafe.Pointer(&copyFFT_args.arg_fft2y)
	copyFFT_args.argptr[2] = unsafe.Pointer(&copyFFT_args.arg_fft2z)
	copyFFT_args.argptr[3] = unsafe.Pointer(&copyFFT_args.arg_fftx)
	copyFFT_args.argptr[4] = unsafe.Pointer(&copyFFT_args.arg_ffty)
	copyFFT_args.argptr[5] = unsafe.Pointer(&copyFFT_args.arg_fftz)
	copyFFT_args.argptr[6] = unsafe.Pointer(&copyFFT_args.arg_noi)
	copyFFT_args.argptr[7] = unsafe.Pointer(&copyFFT_args.arg_image)
	copyFFT_args.argptr[8] = unsafe.Pointer(&copyFFT_args.arg_Nx)
	copyFFT_args.argptr[9] = unsafe.Pointer(&copyFFT_args.arg_Ny)
	copyFFT_args.argptr[10] = unsafe.Pointer(&copyFFT_args.arg_Nz)
}

// Wrapper for copyFFT CUDA kernel, asynchronous.
func k_copyFFT_async(fft2x unsafe.Pointer, fft2y unsafe.Pointer, fft2z unsafe.Pointer, fftx unsafe.Pointer, ffty unsafe.Pointer, fftz unsafe.Pointer, noi int, image int, Nx int, Ny int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("copyFFT")
	}

	copyFFT_args.Lock()
	defer copyFFT_args.Unlock()

	if copyFFT_code == 0 {
		copyFFT_code = fatbinLoad(copyFFT_map, "copyFFT")
	}

	copyFFT_args.arg_fft2x = fft2x
	copyFFT_args.arg_fft2y = fft2y
	copyFFT_args.arg_fft2z = fft2z
	copyFFT_args.arg_fftx = fftx
	copyFFT_args.arg_ffty = ffty
	copyFFT_args.arg_fftz = fftz
	copyFFT_args.arg_noi = noi
	copyFFT_args.arg_image = image
	copyFFT_args.arg_Nx = Nx
	copyFFT_args.arg_Ny = Ny
	copyFFT_args.arg_Nz = Nz

	args := copyFFT_args.argptr[:]
	cu.LaunchKernel(copyFFT_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("copyFFT")
	}
}

// maps compute capability on PTX code for copyFFT kernel.
var copyFFT_map = map[int]string{0: "",
	50: copyFFT_ptx_50}

// copyFFT PTX code for various compute capabilities.
const (
	copyFFT_ptx_50 = `
.version 7.5
.target sm_50
.address_size 64

	// .globl	copyFFT

.visible .entry copyFFT(
	.param .u64 copyFFT_param_0,
	.param .u64 copyFFT_param_1,
	.param .u64 copyFFT_param_2,
	.param .u64 copyFFT_param_3,
	.param .u64 copyFFT_param_4,
	.param .u64 copyFFT_param_5,
	.param .u32 copyFFT_param_6,
	.param .u32 copyFFT_param_7,
	.param .u32 copyFFT_param_8,
	.param .u32 copyFFT_param_9,
	.param .u32 copyFFT_param_10
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<20>;


	ld.param.u64 	%rd1, [copyFFT_param_0];
	ld.param.u64 	%rd2, [copyFFT_param_1];
	ld.param.u64 	%rd3, [copyFFT_param_2];
	ld.param.u64 	%rd4, [copyFFT_param_3];
	ld.param.u64 	%rd5, [copyFFT_param_4];
	ld.param.u64 	%rd6, [copyFFT_param_5];
	ld.param.u32 	%r4, [copyFFT_param_6];
	ld.param.u32 	%r5, [copyFFT_param_7];
	ld.param.u32 	%r6, [copyFFT_param_8];
	ld.param.u32 	%r7, [copyFFT_param_9];
	ld.param.u32 	%r8, [copyFFT_param_10];
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %tid.x;
	mad.lo.s32 	%r1, %r10, %r9, %r11;
	mov.u32 	%r12, %ntid.y;
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %tid.y;
	mad.lo.s32 	%r2, %r13, %r12, %r14;
	mov.u32 	%r15, %ntid.z;
	mov.u32 	%r16, %ctaid.z;
	mov.u32 	%r17, %tid.z;
	mad.lo.s32 	%r3, %r16, %r15, %r17;
	setp.ge.s32 	%p1, %r1, %r6;
	setp.ge.s32 	%p2, %r2, %r7;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r8;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_3;

	div.s32 	%r18, %r8, %r4;
	div.s32 	%r19, %r3, %r18;
	setp.ne.s32 	%p6, %r19, %r5;
	@%p6 bra 	$L__BB0_3;

	mad.lo.s32 	%r20, %r3, %r7, %r2;
	mad.lo.s32 	%r21, %r20, %r6, %r1;
	cvta.to.global.u64 	%rd7, %rd1;
	mul.wide.s32 	%rd8, %r21, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f1, [%rd9];
	cvta.to.global.u64 	%rd10, %rd4;
	add.s64 	%rd11, %rd10, %rd8;
	st.global.f32 	[%rd11], %f1;
	cvta.to.global.u64 	%rd12, %rd2;
	add.s64 	%rd13, %rd12, %rd8;
	ld.global.nc.f32 	%f2, [%rd13];
	cvta.to.global.u64 	%rd14, %rd5;
	add.s64 	%rd15, %rd14, %rd8;
	st.global.f32 	[%rd15], %f2;
	cvta.to.global.u64 	%rd16, %rd3;
	add.s64 	%rd17, %rd16, %rd8;
	ld.global.nc.f32 	%f3, [%rd17];
	cvta.to.global.u64 	%rd18, %rd6;
	add.s64 	%rd19, %rd18, %rd8;
	st.global.f32 	[%rd19], %f3;

$L__BB0_3:
	ret;

}

`
)
