package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/kuchkin/mumax3-gneb/cuda/cu"
	"github.com/kuchkin/mumax3-gneb/timer"
	"sync"
	"unsafe"
)

// CUDA handle for sumimage kernel
var sumimage_code cu.Function

// Stores the arguments for sumimage kernel invocation
type sumimage_args_t struct {
	arg_src     unsafe.Pointer
	arg_dst     unsafe.Pointer
	arg_initVal float32
	arg_n       int
	arg_image   int
	arg_noi     int
	arg_Nz      int
	argptr      [7]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for sumimage kernel invocation
var sumimage_args sumimage_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	sumimage_args.argptr[0] = unsafe.Pointer(&sumimage_args.arg_src)
	sumimage_args.argptr[1] = unsafe.Pointer(&sumimage_args.arg_dst)
	sumimage_args.argptr[2] = unsafe.Pointer(&sumimage_args.arg_initVal)
	sumimage_args.argptr[3] = unsafe.Pointer(&sumimage_args.arg_n)
	sumimage_args.argptr[4] = unsafe.Pointer(&sumimage_args.arg_image)
	sumimage_args.argptr[5] = unsafe.Pointer(&sumimage_args.arg_noi)
	sumimage_args.argptr[6] = unsafe.Pointer(&sumimage_args.arg_Nz)
}

// Wrapper for sumimage CUDA kernel, asynchronous.
func k_sumimage_async(src unsafe.Pointer, dst unsafe.Pointer, initVal float32, n int, image int, noi int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("sumimage")
	}

	sumimage_args.Lock()
	defer sumimage_args.Unlock()

	if sumimage_code == 0 {
		sumimage_code = fatbinLoad(sumimage_map, "sumimage")
	}

	sumimage_args.arg_src = src
	sumimage_args.arg_dst = dst
	sumimage_args.arg_initVal = initVal
	sumimage_args.arg_n = n
	sumimage_args.arg_image = image
	sumimage_args.arg_noi = noi
	sumimage_args.arg_Nz = Nz

	args := sumimage_args.argptr[:]
	cu.LaunchKernel(sumimage_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("sumimage")
	}
}

// maps compute capability on PTX code for sumimage kernel.
var sumimage_map = map[int]string{0: "",
	50: sumimage_ptx_50}

// sumimage PTX code for various compute capabilities.
const (
	sumimage_ptx_50 = `
.version 7.5
.target sm_50
.address_size 64

	// .globl	sumimage

.visible .entry sumimage(
	.param .u64 sumimage_param_0,
	.param .u64 sumimage_param_1,
	.param .f32 sumimage_param_2,
	.param .u32 sumimage_param_3,
	.param .u32 sumimage_param_4,
	.param .u32 sumimage_param_5,
	.param .u32 sumimage_param_6
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<56>;
	.reg .b32 	%r<52>;
	.reg .b64 	%rd<19>;
	// demoted variable
	.shared .align 4 .b8 _ZZ8sumimageE5sdata[2048];

	ld.param.u64 	%rd7, [sumimage_param_0];
	ld.param.u64 	%rd6, [sumimage_param_1];
	ld.param.f32 	%f51, [sumimage_param_2];
	ld.param.u32 	%r22, [sumimage_param_3];
	ld.param.u32 	%r23, [sumimage_param_4];
	ld.param.u32 	%r24, [sumimage_param_5];
	ld.param.u32 	%r25, [sumimage_param_6];
	cvta.to.global.u64 	%rd1, %rd7;
	mov.u32 	%r51, %ntid.x;
	mov.u32 	%r26, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r49, %r26, %r51, %r2;
	mov.u32 	%r27, %nctaid.x;
	mul.lo.s32 	%r4, %r27, %r51;
	setp.ge.s32 	%p1, %r49, %r22;
	@%p1 bra 	$L__BB0_17;

	div.s32 	%r5, %r22, %r25;
	div.s32 	%r6, %r25, %r24;
	add.s32 	%r28, %r49, %r4;
	not.b32 	%r29, %r28;
	add.s32 	%r30, %r4, %r22;
	add.s32 	%r31, %r30, %r29;
	div.u32 	%r7, %r31, %r4;
	add.s32 	%r32, %r7, 1;
	and.b32  	%r48, %r32, 3;
	setp.eq.s32 	%p2, %r48, 0;
	@%p2 bra 	$L__BB0_6;

	mul.wide.s32 	%rd8, %r49, 4;
	add.s64 	%rd18, %rd1, %rd8;
	mul.wide.s32 	%rd3, %r4, 4;

$L__BB0_3:
	.pragma "nounroll";
	div.s32 	%r33, %r49, %r5;
	div.s32 	%r34, %r33, %r6;
	setp.ne.s32 	%p3, %r34, %r23;
	@%p3 bra 	$L__BB0_5;

	ld.global.nc.f32 	%f18, [%rd18];
	add.f32 	%f51, %f51, %f18;

$L__BB0_5:
	add.s32 	%r49, %r49, %r4;
	add.s64 	%rd18, %rd18, %rd3;
	add.s32 	%r48, %r48, -1;
	setp.ne.s32 	%p4, %r48, 0;
	@%p4 bra 	$L__BB0_3;

$L__BB0_6:
	setp.lt.u32 	%p5, %r7, 3;
	@%p5 bra 	$L__BB0_17;

$L__BB0_8:
	div.s32 	%r35, %r49, %r5;
	div.s32 	%r36, %r35, %r6;
	setp.ne.s32 	%p6, %r36, %r23;
	@%p6 bra 	$L__BB0_10;

	mul.wide.s32 	%rd9, %r49, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.nc.f32 	%f19, [%rd10];
	add.f32 	%f51, %f51, %f19;

$L__BB0_10:
	add.s32 	%r15, %r49, %r4;
	div.s32 	%r37, %r15, %r5;
	div.s32 	%r38, %r37, %r6;
	setp.ne.s32 	%p7, %r38, %r23;
	@%p7 bra 	$L__BB0_12;

	mul.wide.s32 	%rd11, %r15, 4;
	add.s64 	%rd12, %rd1, %rd11;
	ld.global.nc.f32 	%f20, [%rd12];
	add.f32 	%f51, %f51, %f20;

$L__BB0_12:
	add.s32 	%r16, %r15, %r4;
	div.s32 	%r39, %r16, %r5;
	div.s32 	%r40, %r39, %r6;
	setp.ne.s32 	%p8, %r40, %r23;
	@%p8 bra 	$L__BB0_14;

	mul.wide.s32 	%rd13, %r16, 4;
	add.s64 	%rd14, %rd1, %rd13;
	ld.global.nc.f32 	%f21, [%rd14];
	add.f32 	%f51, %f51, %f21;

$L__BB0_14:
	add.s32 	%r17, %r16, %r4;
	div.s32 	%r41, %r17, %r5;
	div.s32 	%r42, %r41, %r6;
	setp.ne.s32 	%p9, %r42, %r23;
	@%p9 bra 	$L__BB0_16;

	mul.wide.s32 	%rd15, %r17, 4;
	add.s64 	%rd16, %rd1, %rd15;
	ld.global.nc.f32 	%f22, [%rd16];
	add.f32 	%f51, %f51, %f22;

$L__BB0_16:
	add.s32 	%r49, %r17, %r4;
	setp.lt.s32 	%p10, %r49, %r22;
	@%p10 bra 	$L__BB0_8;

$L__BB0_17:
	shl.b32 	%r43, %r2, 2;
	mov.u32 	%r44, _ZZ8sumimageE5sdata;
	add.s32 	%r19, %r44, %r43;
	st.shared.f32 	[%r19], %f51;
	bar.sync 	0;
	setp.lt.u32 	%p11, %r51, 66;
	@%p11 bra 	$L__BB0_22;

$L__BB0_19:
	shr.u32 	%r21, %r51, 1;
	setp.ge.u32 	%p12, %r2, %r21;
	@%p12 bra 	$L__BB0_21;

	ld.shared.f32 	%f23, [%r19];
	shl.b32 	%r45, %r21, 2;
	add.s32 	%r46, %r19, %r45;
	ld.shared.f32 	%f24, [%r46];
	add.f32 	%f25, %f23, %f24;
	st.shared.f32 	[%r19], %f25;

$L__BB0_21:
	bar.sync 	0;
	setp.gt.u32 	%p13, %r51, 131;
	mov.u32 	%r51, %r21;
	@%p13 bra 	$L__BB0_19;

$L__BB0_22:
	setp.gt.s32 	%p14, %r2, 31;
	@%p14 bra 	$L__BB0_24;

	ld.volatile.shared.f32 	%f26, [%r19];
	ld.volatile.shared.f32 	%f27, [%r19+128];
	add.f32 	%f28, %f26, %f27;
	st.volatile.shared.f32 	[%r19], %f28;
	ld.volatile.shared.f32 	%f29, [%r19+64];
	ld.volatile.shared.f32 	%f30, [%r19];
	add.f32 	%f31, %f30, %f29;
	st.volatile.shared.f32 	[%r19], %f31;
	ld.volatile.shared.f32 	%f32, [%r19+32];
	ld.volatile.shared.f32 	%f33, [%r19];
	add.f32 	%f34, %f33, %f32;
	st.volatile.shared.f32 	[%r19], %f34;
	ld.volatile.shared.f32 	%f35, [%r19+16];
	ld.volatile.shared.f32 	%f36, [%r19];
	add.f32 	%f37, %f36, %f35;
	st.volatile.shared.f32 	[%r19], %f37;
	ld.volatile.shared.f32 	%f38, [%r19+8];
	ld.volatile.shared.f32 	%f39, [%r19];
	add.f32 	%f40, %f39, %f38;
	st.volatile.shared.f32 	[%r19], %f40;
	ld.volatile.shared.f32 	%f41, [%r19+4];
	ld.volatile.shared.f32 	%f42, [%r19];
	add.f32 	%f43, %f42, %f41;
	st.volatile.shared.f32 	[%r19], %f43;

$L__BB0_24:
	setp.ne.s32 	%p15, %r2, 0;
	@%p15 bra 	$L__BB0_26;

	ld.shared.f32 	%f44, [_ZZ8sumimageE5sdata];
	cvta.to.global.u64 	%rd17, %rd6;
	atom.global.add.f32 	%f45, [%rd17], %f44;

$L__BB0_26:
	ret;

}

`
)
